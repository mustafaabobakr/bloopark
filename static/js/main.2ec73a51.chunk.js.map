{"version":3,"sources":["App.js","serviceWorker.js","index.js","logo.png"],"names":["App","react_default","a","createElement","Fragment","className","href","target","rel","src","Logo","alt","title","action","method","type","name","id","for","react_fontawesome_index_es","icon","faEye","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"+LAwDeA,MAlDf,WACE,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,UAAQE,UAAU,UAChBJ,EAAAC,EAAAC,cAAA,KACEE,UAAU,cACVC,KAAK,IACLC,OAAO,SACPC,IAAI,uBAENP,EAAAC,EAAAC,cAAA,OAAKM,IAAKC,IAAML,UAAU,WAAWM,IAAI,UAEzCV,EAAAC,EAAAC,cAAA,UAAQE,UAAU,aAAaO,MAAM,QACnCX,EAAAC,EAAAC,cAAA,QAAME,UAAU,oBACdJ,EAAAC,EAAAC,cAAA,uBAINF,EAAAC,EAAAC,cAAA,QAAME,UAAU,QACdJ,EAAAC,EAAAC,cAAA,WAASE,UAAU,YACjBJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,kBAAd,gBACAJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kBAAb,yCAEFJ,EAAAC,EAAAC,cAAA,QAAMU,OAAO,GAAGC,OAAO,GAAGT,UAAU,QAClCJ,EAAAC,EAAAC,cAAA,YAAUE,UAAU,gBAClBJ,EAAAC,EAAAC,cAAA,SAAOY,KAAK,QAAQC,KAAK,QAAQC,GAAG,QAAQZ,UAAU,wBACtDJ,EAAAC,EAAAC,cAAA,SAAOe,IAAI,QAAQb,UAAU,uBAA7B,kBAEFJ,EAAAC,EAAAC,cAAA,YAAUE,UAAU,gBAClBJ,EAAAC,EAAAC,cAAA,SAAOY,KAAK,WAAWC,KAAK,WAAWC,GAAG,WAAWZ,UAAU,wBAC/DJ,EAAAC,EAAAC,cAAA,SAAOe,IAAI,WAAWb,UAAU,uBAAhC,YACAJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,sBAChBJ,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAiBC,KAAMC,QAG3BpB,EAAAC,EAAAC,cAAA,UAAQY,KAAK,SAASE,GAAG,SAASZ,UAAU,qBAA5C,SACAJ,EAAAC,EAAAC,cAAA,KAAGG,KAAK,IAAID,UAAU,wBAAtB,2BAGJJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,UAChBJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,eACZJ,EAAAC,EAAAC,cAAA,yBADF,gBAIAF,EAAAC,EAAAC,cAAA,KAAGE,UAAU,iBAAb,0GCtCYiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.2ec73a51.chunk.js","sourcesContent":["import React from 'react';\nimport Logo from './logo.png'\n// get our fontawesome imports\nimport { faEye } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nfunction App() {\n  return (\n    <>\n      <header className=\"header\">\n        <a\n          className=\"header-link\"\n          href=\"#\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n        <img src={Logo} className=\"App-logo\" alt=\"logo\" />\n        </a>\n        <button className=\"header-btn\" title=\"menu\">\n          <span className=\"header-btn__menu\">\n            <span>&nbsp;</span>\n          </span>\n        </button>\n      </header>\n      <main className=\"main\">\n        <section className=\"gretting\">\n          <h1 className=\"gretting__name\">Hello, John!</h1>\n          <p className=\"gretting__text\">Please log in with your credentials.</p>\n        </section>\n        <form action=\"\" method=\"\" className=\"form\">\n          <fieldset className=\"form-control\">\n            <input type=\"email\" name=\"email\" id=\"email\" className=\"form-control__input\" />\n            <label for=\"email\" className=\"form-control__label\" >Email address</label>\n          </fieldset>\n          <fieldset className=\"form-control\">\n            <input type=\"password\" name=\"password\" id=\"password\" className=\"form-control__input\" />\n            <label for=\"password\" className=\"form-control__label\">Password</label>\n            <button className=\"form-control__icon\">\n              <FontAwesomeIcon icon={faEye} />\n            </button>\n          </fieldset>\n          <button type=\"submit\" id=\"submit\" className=\"form-control__btn\">Login</button>\n          <a href=\"#\" className=\"form-control__forget\">Forgot your password?</a>\n        </form>\n      </main>\n      <footer className=\"footer\">\n        <h2 className=\"footer-head\">\n          <span>Not yet a</span>\n          GOLD TRADER?\n        </h2>\n        <p className=\"footer-bottom\">By creating an account with our store, you will be able to move through the checkout process faster</p>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.ffe5568c.png\";"],"sourceRoot":""}