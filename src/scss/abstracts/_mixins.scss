@mixin clearFix {
  &:after {
    display: table;
    clear: both;
  }
}

// MEDIA QUERY MANAGER
// 0 - 600px:  Phone
// 600 - 900px: Tablet portrait
// 900 - 1200px Tablet landscape
// 1200 - 1800 is where our normal style apply
// 1800px + : Big Desktop

// $brakpoint argument choices:
// em is best for @media instead of px
// - phone max-width: 600px /16 = 37.5em
// - tab-port max-width: 900px / 16 = 56.25em
// - tab-land max-width: 1200px / 16 = 75em
// - big-desktop min-width: 1800px / 16 = 112.5em
// ORDER:
// > Base + typography
// > general layout + grid
// > page layout
// > components
// +1800 < ðŸ“º       || big-desktop
// 900 < ðŸ’» < 1200  || tab-land
// 600 < ðŸ–¥ < 900   || tab-land
// ðŸ“± < 600         || phone

@mixin respond($breakpoint) {
  @if $breakpoint==big-desktop {
    @media (min-width: 112.5em) {
      @content;
    }
  }
  @if $breakpoint==tab-land {
    @media (max-width: 75em) {
      @content;
    }
  }
  @if $breakpoint==tab-port {
    @media (max-width: 56.25em) {
      @content;
    }
  }
  @if $breakpoint==phone {
    @media (max-width: 37.5em) {
      @content;
    }
  }
}

@mixin media($type, $number) {
  @media (#{$type}-width: #{$number}px) {
    @content;
  }
}

@mixin mediax($min, $max) {
  @media (min-width: #{$min}px) and (max-width: #{$max}px) {
    @content;
  }
}
// FONT------------------------------------------------------
@mixin x-font-face($font-family, $file-path, $query-string: "", $weight: normal, $style: normal) {
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;
    font-display: swap;
    @if $query-string == "" {
      src: url("#{$file-path}.eot");
      src: url("#{$file-path}.eot?#iefix") format("embedded-opentype"), url("#{$file-path}.woff") format("woff"),
        url("#{$file-path}.ttf") format("truetype"), url("#{$file-path}.svg##{$font-family}") format("svg");
    } @else {
      src: url("#{$file-path}.eot?#{$query-string}");
      src: url("#{$file-path}.eot?#{$query-string}#iefix") format("embedded-opentype"),
        url("#{$file-path}.woff?#{$query-string}") format("woff"),
        url("#{$file-path}.ttf?#{$query-string}") format("truetype"),
        url("#{$file-path}.svg?#{$query-string}##{$font-family}") format("svg");
    }
  }
}
@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    font-weight: $weight;
    font-style: $style;
    font-display: swap;
    src: url($file-name+".eot");
    src: url($file-name+".eot?#iefix") format("embedded-opentype"), url($file-name+".woff") format("woff"),
      url($file-name+".ttf") format("truetype"), url($file-name+".svg##{$font-name}") format("svg");
  }
}

// TXT-BOX on IMG
@mixin txtBox {
  background-color: rgba(0, 0, 0, 0.5);
  color: #fff;
  display: inline;
}

// Grediant txt
@mixin txtGred($start, $end) {
  // backup color
  color: $start;
  background: linear-gradient(to right, $start, $end);
  -webkit-text-fill-color: transparent;
  -webkit-background-clip: text;
}
//  FONTS end-----------------------------------------------------

// SHADOW---------------------------------------------------------
@mixin dropDownShadow($opacity: 0.5) {
  box-shadow: 0 0.4rem 2.4rem -0.4rem rgba(black, $opacity);
  border: 1px solid #c6c6c6;
  border-color: rgba(0, 0, 0, 0.05);
  border-radius: 4px;
}

@mixin txtShadow($color: #fff) {
  text-shadow: 0 0 4px $color;
}

@mixin dynamicShadow {
  position: relative;

  &::after {
    content: "";
    width: 100%;
    height: 100%;
    position: absolute;
    z-index: -1;
    top: 0.5rem;
    opacity: 0.7;
    background: inherit;
    filter: blur(0.4rem);
  }
}

// TXT SHADOW
// https://codepen.io/roikles/pen/xbydH?editors=1100
@mixin longshadow($color_a, $color_b, $stepnum, $opacity: 1) {
  $gradient_steps: null;

  @for $i from 1 through $stepnum {
    $weight: (($i - 1) / $stepnum) * 100;

    $colour_mix: mix($color_b, rgba($color_a, $opacity), $weight);

    $seperator: null;

    @if ($i !=$stepnum) {
      $seperator: #{","};
    }

    $gradient_steps: append(#{$gradient_steps}, #{$i}px #{$i}px $colour_mix $seperator);
  }

  text-shadow: $gradient_steps;
}

// --------------------ex-----------------------
.text-longshadow {
  @include longshadow(#222, #333, 4, 0.1);
}

// SHADOW ens---------------------------------------------------------

//  HOVER-----------------------------------------------------
// on hover change: COLOR
@mixin hoverColor($bgcolor, $hovercolor) {
  color: $bgcolor;
  &:hover {
    color: $hovercolor;
  }
}

// on hover change: BACKGROUND
@mixin hoverBg($bgcolor, $hovercolor) {
  background: $bgcolor;
  &:hover {
    background: $hovercolor;
  }
}
//  HOVER end-----------------------------------------------------

// IMG-----------------------------------------------------
// OVERLAY
@mixin overlayDarkBG($url) {
  background: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url(quote($url));
}

@mixin overlayFloorFade($url) {
  background: linear-gradient(to bottom, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.6)), url(quote($url));
}

@mixin overlayDark($opacity: 0.8) {
  position: relative;
  &::after {
    content: "";
    position: absolute;
    z-index: z(zOverlay);
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(black, $opacity);
  }
}

@mixin overlayWhite($opacity: 0.8) {
  position: relative;
  &::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(white, $opacity);
  }
}

// High RES-IMGs
@mixin image-2x($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
    background-image: url(quote($image));
    background-size: $width $height;
  }
}
@mixin bgwhite($opacity: 0.8) {
  background-color: rgba(white, $opacity);
}
@mixin bgblack($opacity: 0.8) {
  background-color: rgba(black, $opacity);
}

// IMG end-----------------------------------------------------
// POSITION-----------------------------------------------------
@mixin center($x: -50%, $y: -50%) {
  position: absolute;
  top: -($y);
  left: -($x);
  transform: translate($x, $y);
}

@mixin center-children {
  display: flex;
  justify-content: center;
  align-items: center;
}
// POSITION end-----------------------------------------------------
@mixin grab {
  cursor: -webkit-grab;
  cursor: -moz-grab;
  cursor: -o-grab;
  cursor: -ms-grab;
  cursor: grab;
}

@mixin grabbing {
  cursor: -webkit-grabbing;
  cursor: -moz-grabbing;
  cursor: -o-grabbing;
  cursor: -ms-grabbing;
  cursor: grabbing;
}
